if( length(vars)>1 ){
vars = vars[-1]
}else{
vars=1
}
names(dt)[match(resp,names(dt))] = "resp"
resp = "resp"
# Create the graph
pd = position_dodge(.1) # move them .05 to the left and right
dodge = position_dodge(width=0.9) # errorbar position in histogram
# Main graph
if( histo==T & vars!=1 ){
plot = ggplot(dt, aes_string(x=xvar, y=resp, fill=vars))
}else if(histo==T & vars==1 ){
plot = ggplot(dt, aes_string(x=xvar, y=resp))
}else{
plot = ggplot(dt, aes_string(x=xvar, y=resp, group=vars))
}
# Add error bars in psychometric curves
if( se==T & histo==F ){
plot = plot + geom_errorbar(aes(ymin=resp-se, ymax=resp+se), width=.3, colour="gray30", position=pd)
}
# Add line(s) and points
if( histo ){
plot = plot + geom_bar(stat="identity", position=position_dodge()) + geom_bar(stat="identity", position=position_dodge(), colour="black", show_guide=FALSE)
}else{
if( vars == 1 ){
plot = plot + geom_line(aes_string(group=vars), size=1, position=pd)
}else{
plot = plot + geom_line(aes_string(linetype=vars), size=1, position=pd)
}
plot = plot + geom_point(shape=21, fill="white", size=4, position=pd)
}
# Add error bars in histograms
if( se==T & histo==T ){
plot = plot + geom_errorbar(aes(ymin=resp-se, ymax=resp+se), width=.3, colour="gray30", position=dodge)
}
# Add axe labels
if( !is.null(axnames) ){
if( pphy ){
plot = plot + ylab(paste("Proportion of", axnames[1], sep=" ")) + xlab(axnames[2])
}else{
plot = plot + ylab(axnames[1]) + xlab(axnames[2])
}
}
# For psychophysic experiment, add the POS
# Line 50%-----------------------------
if( pphy == T ){
if( is.factor(dt[,xvar])==T ){
xax = mean(as.numeric(unique(dt[,xvar])))
}else {
xax = mean(unique(dt[,xvar]))
}
plot = plot +
geom_segment(mapping=aes_string(x=xax, y=0, xend=xax, yend=.5), color='gray50', linetype="dashed", size=.2) +
geom_segment(mapping=aes_string(x=0, y=0.5, xend=xax, yend=.5), color='gray50', linetype="dashed", size=.2)
}
# Customize the theme and layout
plot = plot + theme_bw() +
theme(# Grid ---------------------------
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
# Legend -------------------------
legend.title=element_blank(),
legend.justification = c(0, 1), legend.position = c(0, 1),
legend.key.width=unit(4, "lines"), legend.key.height=unit(2, "lines"),
legend.key = element_rect(colour = 'black'),
legend.text=element_text(size = 18),
# Axis ---------------------------
axis.title.x = element_text(face = 'bold', size = 20, vjust =-1),
axis.title.y = element_text(face = 'bold', size = 20, vjust = 0.1),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.margin = unit(c(.5,0.5,1.5,.9), "cm")
) +
scale_x_discrete(breaks=unique(dt[,xvar]), labels=unique(dt[,xvar])) +
scale_y_continuous(expand = c(0, 0))
return(plot)
}
plotme(descp_data, vars=c(subj, vars), xvar=stim, resp='mean', se=T, pphy=T, axnames=axnames)
plotme  <- function(dt, vars=NULL, xvar=NULL, resp="resp", se=F, pphy=F, histo=F, axnames=NULL){
#
#  Function to plot line graphs
#  Take as input :
#    1. a data frame of date (mean already computes)
#    2. the variables used including the subjects
#    3. the variable going to the x axis
#    4. the name of the dependent variable (VD)
#    5. a logical value to display standard error (should be called se)
#    6. a logical value to display the PSS point
#    7. a logical value to plot an histogram (default=line)
#    8. the axes names as a vector of length 2, y label and x labe
#
# GT Vallet  -- Lyon2 University
# 2013/07/01 -- v1
# 2014/03/18 -- v2 Fix bug to add the PSE line on psychophysic plot
# Load required packages
require('grid')
require('ggplot2')
require('gridExtra')
# Remove subjects from the list of variables
if( length(vars)>1 ){
vars = vars[-1]
}else{
vars=1
}
names(dt)[match(resp,names(dt))] = "resp"
resp = "resp"
# Create the graph
pd = position_dodge(.1) # move them .05 to the left and right
dodge = position_dodge(width=0.9) # errorbar position in histogram
# Main graph
if( histo==T & vars!=1 ){
plot = ggplot(dt, aes_string(x=xvar, y=resp, fill=vars))
}else if(histo==T & vars==1 ){
plot = ggplot(dt, aes_string(x=xvar, y=resp))
}else{
plot = ggplot(dt, aes_string(x=xvar, y=resp, group=vars))
}
# Add error bars in psychometric curves
if( se==T & histo==F ){
plot = plot + geom_errorbar(aes(ymin=resp-se, ymax=resp+se), width=.3, colour="gray30", position=pd)
}
# Add line(s) and points
if( histo ){
plot = plot + geom_bar(stat="identity", position=position_dodge()) + geom_bar(stat="identity", position=position_dodge(), colour="black", show_guide=FALSE)
}else{
if( vars == 1 ){
plot = plot + geom_line(aes_string(group=vars), size=1, position=pd)
}else{
plot = plot + geom_line(aes_string(linetype=vars), size=1, position=pd)
}
plot = plot + geom_point(shape=21, fill="white", size=4, position=pd)
}
# Add error bars in histograms
if( se==T & histo==T ){
plot = plot + geom_errorbar(aes(ymin=resp-se, ymax=resp+se), width=.3, colour="gray30", position=dodge)
}
# Add axe labels
if( !is.null(axnames) ){
if( pphy ){
plot = plot + ylab(paste("Proportion of", axnames[1], sep=" ")) + xlab(axnames[2])
}else{
plot = plot + ylab(axnames[1]) + xlab(axnames[2])
}
}
# For psychophysic experiment, add the POS
# Line 50%-----------------------------
if( pphy == T ){
if( is.factor(dt[,xvar])==T ){
xax = mean(as.numeric(unique(dt[,xvar])))
}else {
xax = mean(unique(dt[,xvar]))
}
plot = plot +
geom_segment(mapping=aes_string(x=xax, y=0, xend=xax, yend=.5), color='gray50', linetype="dashed", size=.2) +
geom_segment(mapping=aes_string(x=0, y=0.5, xend=xax, yend=.5), color='gray50', linetype="dashed", size=.2)
}
# Customize the theme and layout
plot = plot + theme_bw() +
theme(# Grid ---------------------------
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
# Legend -------------------------
legend.title=element_blank(),
legend.justification = c(0, 1), legend.position = c(0, 1),
legend.key.width=unit(4, "lines"), legend.key.height=unit(2, "lines"),
legend.key = element_rect(colour = 'black'),
legend.text=element_text(size = 18),
# Axis ---------------------------
axis.title.x = element_text(face = 'bold', size = 20, vjust =-1),
axis.title.y = element_text(face = 'bold', size = 20, vjust = 0.1),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.margin = unit(c(.5,0.5,1.5,.9), "cm")
) +
scale_x_discrete(breaks=unique(dt[,xvar]), labels=unique(dt[,xvar])) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1))
return(plot)
}
plotme(descp_data, vars=c(subj, vars), xvar=stim, resp='mean', se=T, pphy=T, axnames=axnames)
plot.avg = suppressMessages(suppressWarnings(plotme(descp_data, vars=c(subj, vars), xvar=stim, resp='mean', se=T, pphy=T, axnames=axnames)   ))
plot.avg
plot.avg = plotme(descp_data, vars=c(subj, vars), xvar=stim, resp='mean', se=T, pphy=T, axnames=axnames)
dt.subj
ic
dt.subj = cbind(dt.subj, pfit)
pfitted
dtfitted
dt.subj
dt.cond
descp_data
require(dplyr)
load('~/R_Functions/psychophy_dt.RData')
data = dt
data = dt
stim='Temps'
vars = 'Taille_Img'
resp = 'correct'
subj = 'subject_nr'
axnames = c("comparison longer than standard", "Temps (ms)")
psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/fitPPCurve.R')
psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/psychophy.R')
psychophy(data, subj, stim, resp, vars, axnames)
require(grid)
require(dplyr)
require(ggplot2)
require(modelfree)
source('~/RFunctions/plotme.R')
source('~/RFunctions/fitPPCurve.R')
source('~/R_Functions/summarySEwithin.R')
stim_level = unique( data[, match(stim, names(data))] )
stim_level
call <- substitute(data %.%
filter(resp >= 0 & resp <= 1) %.%
group_by(subj, vars, stim) %.%
summarise( nb_corr   = sum(resp),
nb_trials = length(resp),
mean = mean(resp)),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
dt.subj = eval(call)
call <- substitute( do(group_by(dt.subj, subj, vars), function(df) fitPPCurve( df$stim, df$nb_corr, df$nb_trials )),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
fit = eval(call)
dt.subj
require(dplyr)
library(dplyr)
call <- substitute(data %.%
filter(resp >= 0 & resp <= 1) %.%
group_by(subj, vars, stim) %.%
summarise( nb_corr   = sum(resp),
nb_trials = length(resp),
mean = mean(resp)),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
dt.subj = eval(call)
dt.subj
require(dplyr)
load('~/R_Functions/psychophy_dt.RData')
data = dt
data = dt
stim='Temps'
vars = 'Taille_Img'
resp = 'correct'
subj = 'subject_nr'
axnames = c("comparison longer than standard", "Temps (ms)")
source('~/RFunctions/psychophy.R')
psychophy(data, subj, stim, resp, vars, axnames)
require(grid)
require(dplyr)
require(ggplot2)
require(modelfree)
source('~/RFunctions/plotme.R')
source('~/RFunctions/fitPPCurve.R')
source('~/R_Functions/summarySEwithin.R')
stim_level = unique( data[, match(stim, names(data))] )
# compute the number of correct response, the number of trials, the mean by
#   stimulus level by condition and by subject after removing incorrect response
call <- substitute(data %.%
filter(resp >= 0 & resp <= 1) %.%
group_by(subj, vars, stim) %.%
summarise( nb_corr   = sum(resp),
nb_trials = length(resp),
mean = mean(resp)),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
dt.subj = eval(call)
dt.subj
call
data %.% filter(correct >= 0 & correct <= 1)
call
require(dplyr)
load('~/R_Functions/psychophy_dt.RData')
data = dt
stim='Temps'
vars = 'Taille_Img'
resp = 'correct'
subj = 'subject_nr'
axnames = c("comparison longer than standard", "Temps (ms)")
source('~/RFunctions/psychophy.R')
psychophy(data, subj, stim, resp, vars, axnames)
require(grid)
require(dplyr)
require(ggplot2)
require(modelfree)
source('~/RFunctions/plotme.R')
source('~/RFunctions/fitPPCurve.R')
stim_level = unique( data[, match(stim, names(data))] )
# compute the number of correct response, the number of trials, the mean by
#   stimulus level by condition and by subject after removing incorrect response
call <- substitute(data %.%
filter(resp >= 0 & resp <= 1) %.%
group_by(subj, vars, stim) %.%
summarise( nb_corr   = sum(resp),
nb_trials = length(resp),
mean = mean(resp)),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
require(dplyr)
load('~/R_Functions/psychophy_dt.RData')
data = dt
stim='Temps'
vars = 'Taille_Img'
resp = 'correct'
subj = 'subject_nr'
axnames = c("comparison longer than standard", "Temps (ms)")
require(grid)
require(dplyr)
require(ggplot2)
require(modelfree)
source('~/RFunctions/plotme.R')
source('~/RFunctions/fitPPCurve.R')
source('~/R_Functions/summarySEwithin.R')
stim_level = unique( data[, match(stim, names(data))] )
call <- substitute(data %.%
filter(resp >= 0 & resp <= 1) %.%
group_by(subj, vars, stim) %.%
summarise( nb_corr   = sum(resp),
nb_trials = length(resp),
mean = mean(resp)),
list(resp = as.name(resp),
subj = as.name(subj),
vars = as.name(vars),
stim = as.name(stim)))
dt.subj = eval(call)
dt.subj
dplyr
require(dplyr)
load('~/R_Functions/psychophy_dt.RData')
data = dt
data = dt
stim='Temps'
vars = 'Taille_Img'
resp = 'correct'
subj = 'subject_nr'
axnames = c("comparison longer than standard", "Temps (ms)")
source('~/RFunctions/psychophy.R')
psychophy(data, subj, stim, resp, vars, axnames)
fit = psychophy(data, subj, stim, resp, vars, axnames)
detach(plyr)
detach(package:plyr, unload=TRUE)
detach(package:all, unload=TRUE)
detach()
fit = psychophy(data, subj, stim, resp, vars, axnames)
fit
fit = psychophy(data, subj, stim, resp, vars, axnames)
fit = psychophy(data, subj, stim, resp, vars, axnames)
detach(package:plyr)
fit = psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/psychophy.R')
fit = psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/psychophy.R')
fit = psychophy(data, subj, stim, resp, vars, axnames)
"package:phangorn" %in% search()
"package:dplyr" %in% search()
source('~/RFunctions/psychophy.R')
fit = psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/psychophy.R')
fit = psychophy(data, subj, stim, resp, vars, axnames)
source('~/RFunctions/psychophy.R')
fit = psychophy(data, subj, stim, resp, vars, axnames)
library(devtools)
install_github('cogitos/pphy')
nsteps
data = read.csv('activity.csv', h=T, na.strings = "NA")
data$date <- as.Date(data$date, "%Y-%m-%d")
library(plyr)
# Keep only complete case
data.complete = data[ complete.cases(data), ]
sum_steps = ddply(data.complete, .(date), summarise, sumSteps=sum(steps))
hist(sum_steps$sumSteps, main='Histogram of total steps per day', xlab='Total of steps per day')
data = read.csv('activity.csv', h=T, na.strings = "NA")
setwd("~/gtvallet@gmail.com/02_University/01_Cours_Suivis/04_Coursera/Reproductible_Research/Assignements/Assignement_01/RepData_PeerAssessment1")
data = read.csv('activity.csv', h=T, na.strings = "NA")
data$date <- as.Date(data$date, "%Y-%m-%d")
data = read.csv('activity.csv', h=T, na.strings = "NA")
data$date <- as.Date(data$date, "%Y-%m-%d")
library(plyr)
# Keep only complete case
data.complete = data[ complete.cases(data), ]
sum_steps = ddply(data.complete, .(date), summarise, sumSteps=sum(steps))
hist(sum_steps$sumSteps, main='Histogram of total steps per day', xlab='Total of steps per day')
steps.interval = ddply(data.complete, .(interval), summarise, mSteps=mean(steps))
require(ggplot2)
ggplot( data = steps.interval, aes( interval, mSteps )) + geom_line() +
xlab("5-minutes interval number") +
ylab("Average number of steps")
maxinter = steps.interval[steps.interval$mSteps==max(steps.interval$mSteps),1]
# Function to replace NA value by the mean of equivalent interval
replace.na = function(x){
if( is.na(x[1]) ){
value = steps.interval[ which(steps.interval$interval==x[3]), 2]
}else{
value=x[1]
}
return(value)
}
# Apply the function to each row of the data frame
nsteps = as.numeric(apply(data, 1, replace.na))
nsteps
apply(data, 1, replace.na)
data$date
data$date$wday
as.POSIXlt(data$date,format="%Y-%m-%d")
data$date$wday
!(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday'))
data[ !(weekdays(as.Date(date)) %in% c('Saturday','Sunday'), ]
data[ !(weekdays(as.Date(date)) %in% c('Saturday','Sunday') ]
data[ !(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday') ]
!(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday')
data[ !(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday')), ]
!(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday'))
data[ !(weekdays(as.Date(data$date)) %in% c('Saturday','Sunday')), ]
t(aaply(data,2,.fun=function(x) {x[which(is.na(x))] <- mean(x,na.rm=TRUE);x}))
t(aaply(data,1,.fun=function(x) {x[which(is.na(x))] <- mean(x,na.rm=TRUE);x}))
replace.na = function(x){
if( is.na(x[1]) ){
value = steps.interval[ which(steps.interval$interval==x[3]), 2]
}else{
value=x[1]
}
return(value)
}
# Apply the function to each row of the data frame
nsteps = as.numeric(apply(data, 1, replace.na))
nsteps
nsteps = apply(data, 1, replace.na)
nsteps
data[9796,]
x = data[9796,]
is.na(x[1])
value = steps.interval[ which(steps.interval$interval==x[3]), 2]
value
steps.interval$interval==x[3]
x[3]
steps.interval
steps.interval$interval==x[3]
steps.interval$interval
x[3]
steps.interval$interval==15
is(x[3])
steps.interval$interval==as.numeric(x[3])
replace.na = function(x){
if( is.na(x[1]) ){
value = steps.interval[ which(steps.interval$interval==as.numeric(x[3])), 2]
}else{
value=x[1]
}
return(value)
}
# Apply the function to each row of the data frame
nsteps = apply(data, 1, replace.na)
nsteps
dtfilled = cbind(data, nsteps)
View(dtfilled)
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps))
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps), .drop=F)
# Function to replace NA value by the mean of equivalent interval
replace.na = function(x){
if( is.na(x[1]) ){
value = steps.interval[ which(steps.interval$interval==as.numeric(x[3])), 2]
}else{
value=x[1]
}
return(value)
}
# Apply the function to each row of the data frame
nsteps = as.numeric(apply(data, 1, replace.na))
# Combined the original data frame with the filled values
dtfilled = cbind(data, nsteps)
sum_dtfilled = ddply(dtfilled, .(date), summarise, sumSteps=sum(nsteps))
hist(sum_dtfilled$sumSteps, main='Histogram of total steps per day', xlab='Total of steps per day')
weekend = subset(dtfilled, weekdays(date)=='Saturday' | weekdays(date)=='Sunday')
weekend$weekend = 'weekend'
# Subset only week days and add 'week' as label
weekday = subset(dtfilled, weekdays(date)!='Saturday' & weekdays(date)!='Sunday')
weekday$weekend = 'weekday'
# Recombined week and weekend data frame
data.week = rbind(weekend,weekday)
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps), .drop=F)
data.week.me
head(data.week)
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps), .drop=F)
data.week.me
data.week
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps), .drop=F)
data.week.me
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps))
data.week.me
data.week$interval = factor(data.week$interval)
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(steps))
data.week.me
head(data.week)
View(data.week)
data.week.me = ddply(data.week, .(interval), summarise, mSteps=mean(nsteps))
data.week.me
data.week.me = ddply(data.week, .(weekend, interval), summarise, mSteps=mean(nsteps))
data.week.me
